name: Collections_new

on:
  push:
  workflow_dispatch:

jobs:
  get-next-version:
    runs-on: windows-latest
    steps: 
      - name: checking release
        uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4
  do-the-thing:
    name: Zhu Li, do the thing
    runs-on: windows-latest
    if: needs.get-next-version.outputs.new-release-published == 'true'
    needs:
      - get-next-version
    steps:
      - run: ./do-the-thing ${{ needs.get-next-version.outputs.new-release-version }}
  Details_Config:
    runs-on: windows-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Task1- Read the config file and display the contents of it.
        run: |
          $myJson = Get-Content ".github/devops.config" -Raw | ConvertFrom-Json 
          echo $myJson
      - name: Task2- Assign the values into variables from config file
        run: |
          $myName = $myJson.name
          $myEmpId = $myJson.employee_id
          $Myversion = $myJson.version
          $myNam, $myEmpId, $Myversion
      - name: Task3- If any values missed in json, it will throw an error message
        run: |
          if ([string]::IsNullOrEmpty($myName) -or [string]::IsNullOrEmpty($myEmpId) -or [string]::IsNullOrEmpty($Myversion)) 
          {echo "value is null"}
  GithubAction_details:
    runs-on: windows-latest
    steps:
      - name: Tas4- display workflow ref-path, repo-name, author, build-no, branch name
        run: |
          echo "author: ${{ github.repository_owner }}"
          echo "author = ${{ github.actor }}"
          echo "workflow ref-path: ${{ github.workflow_ref }}"
          echo "branch name: ${{ github.ref_name }}"
          echo "build-no: ${{ github.run_number }}"
          echo "repo name: ${{ github.repository }}"
  Using_Secrets:
    runs-on: windows-latest
    steps:
      - name: Task5- create secrets and use those secrets in your job.
        env:
          PASSWORD_PS: ${{secrets.PASSWORD}}
        run: echo $PASSWORD

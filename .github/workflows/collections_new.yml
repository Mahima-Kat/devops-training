name: Collections_new
on:
  push:
  workflow_dispatch: 
  
jobs:
  reading_json:
    name: Reading JSON
    runs-on: windows-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Task1- Read the config file and display the contents of it.
        id: step1
        run: |
          #storing the values from json file to $myJson
          $myJson = Get-Content ".github/devops.config" -Raw | ConvertFrom-Json 
          echo $myJson
          #fetching the values from json file to variables
          $myName = $myJson.name
          $employeeId = $myJson.employee_id
          $versionNo = $myJson.version
          echo "$myName"
          echo "name=${myName}" >> $env:GITHUB_ENV
          echo "emp_id=${employeeId}" >> $env:GITHUB_ENV
          echo "version=${versionNo}" >> $env:GITHUB_ENV
      - name: Checking value null or not
        run: |
          echo "My name is - $Env:name" 
          echo "$env:emp_id" 
          echo "$env:version" 
          #If value are empty it will show error
          if ([string]::IsNullOrEmpty($env:name) -or [string]::IsNullOrEmpty($env:emp_id) -or [string]::IsNullOrEmpty($env:version)) 
          {echo "::error:: values is/are null"}
  fetching_details:
    name: Github Details
    needs: reading_json
    runs-on: windows-latest
    steps:
      - name: Tas4- display workflow ref-path, repo-name, author, build-no, branch name
        run: |
          echo "author: ${{ github.repository_owner }}"
          echo "workflow ref-path: ${{ github.workflow_ref }}"
          echo "branch name: ${{ github.ref_name }}"
          echo "build-no: ${{ github.run_number }}"
          echo "repo name: ${{ github.repository }}"
  create_secrets:
    name: Create Secrets
    needs: fetching_details
    runs-on: windows-latest
    steps:
      - name: Task5- create secrets and use those secrets in your job
        env:
          PASSWORD_PS: ${{secrets.PASSWORD}}
        run: echo $PASSWORD
  github_release:
    name: Create Release
    needs: create_secrets
    runs-on: windows-latest
    steps: 
      - name: identify latest gitHub release and assign to variable
        run: |
          $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/Mahima-Kat/devops-training/releases/latest"
          $latestReleaseVersion = $latestRelease.tag_name
          echo "$latestReleaseVersion"
          $release = $latestReleaseVersion.Split('-')[0]
          echo "$release"
          $releaseNumber  = $latestReleaseVersion.Split('-')[1]
          $releaseNumber = [int]$releaseNumber
          $releaseNumber++
          echo "releaseNumber"
          echo "$release-$releaseNumber"
          $firstVersionNumber = $latestReleaseVersion.Split('-')[3]
          $major = $firstVersionNumber.Split('.')[0]
          $minor = $firstVersionNumber.Split('.')[1]
          $minor = [int]$minor
          $minor++
          $newVersion = "$release-$releaseNumber-$major.$minor"
          echo "$newVersion"
          echo "RELEASE=$release" >> $GITHUB_ENV
          echo "RELEASE_NUMBER=$releaseNumber" >> $GITHUB_ENV
          echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV
      - name: Task7 - create a release with (your name - repo name - branch name - workflow no).
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.newVersion }}
          run: echo $newVersion



  
